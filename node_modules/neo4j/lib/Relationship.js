/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; (function() {
  var PropertyContainer, Relationship, adjustError, status, util, __hasProp = {
  }.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) { child[key] = parent[key]; }; }; function ctor() { this.constructor = child; }; ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  status = require("http-status");

  util = require("./util");

  adjustError = util.adjustError;

  PropertyContainer = require("./PropertyContainer");

  module.exports = Relationship = (function(_super) {
    var get, set, _this = this;


    __extends(Relationship, _super);

    function Relationship(db, data, start, end) {
      var Node;
      Relationship.__super__.constructor.call(this, db, data);
      Node = require("./Node");
      this._start = (start || new Node(db, {
        self: data.start }));

      this._end = (end || new Node(db, {
        self: data.end })); };



    get = function(props) {
      var getter, name, _results;
      _results = [];
      for (name in props) {
        getter = props[name];
        _results.push(Relationship.prototype.__defineGetter__(name, getter)); };

      return _results; };


    set = function(props) {
      var name, setter, _results;
      _results = [];
      for (name in props) {
        setter = props[name];
        _results.push(Relationship.prototype.__defineSetter__(name, setter)); };

      return _results; };


    get({
      start: function() {
        return (this._start || null); } });



    get({
      end: function() {
        return (this._end || null); } });



    get({
      type: function() {
        return this._data.type; } });



    Relationship.prototype.save = function Relationship_prototype_save__1(_) { var message, response, __this = this; var __frame = { name: "Relationship_prototype_save__1", line: 70 }; return __func(_, this, arguments, Relationship_prototype_save__1, 0, __frame, function __$Relationship_prototype_save__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$Relationship_prototype_save__1() {


              return __this._request.put({
                uri: (("" + __this.self) + "/properties"),
                json: __this.data }, __cb(_, __frame, 3, 19, function ___(__0, __1) { response = __1;

                if ((response.statusCode !== status.NO_CONTENT)) {
                  message = "";
                  switch (response.statusCode) {
                  case status.BAD_REQUEST: message = "Invalid data sent";
                    break;
                  case status.NOT_FOUND:
                    message = "Relationship not found";
                  };

                  return _(new Error(message)); } ; return _(null, __this); }, true)); }); })(function ___(error, __result) { __tryCatch(_, function __$Relationship_prototype_save__1() { if (error) {



                return _(adjustError(error)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, _); }); }); };



    Relationship.prototype.index = function Relationship_prototype_index__2(index, key, value, _) { var encodedKey, encodedValue, response, services, url, version, __this = this; var __frame = { name: "Relationship_prototype_index__2", line: 94 }; return __func(_, this, arguments, Relationship_prototype_index__2, 3, __frame, function __$Relationship_prototype_index__2() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$Relationship_prototype_index__2() {


              if (!__this.exists) {
                return _(new Error("Relationship must exists before indexing properties")); } ;

              return __this.db.getServices(__cb(_, __frame, 6, 19, function ___(__0, __1) { services = __1;
                return __this.db.getVersion(__cb(_, __frame, 7, 18, function ___(__0, __2) { version = __2; return (function __$Relationship_prototype_index__2(__then) {
                    if ((version <= 1.4)) {
                      encodedKey = encodeURIComponent(key);
                      encodedValue = encodeURIComponent(value);
                      url = ((((((("" + services.relationship_index) + "/") + index) + "/") + encodedKey) + "/") + encodedValue);
                      return __this._request.post({
                        url: url,
                        json: __this.self }, __cb(_, __frame, 12, 21, function ___(__0, __3) { response = __3; __then(); }, true)); } else {


                      return __this._request.post({
                        url: ((("" + services.relationship_index) + "/") + index),
                        json: {
                          key: key,
                          value: value,
                          uri: __this.self } }, __cb(_, __frame, 17, 21, function ___(__0, __4) { response = __4; __then(); }, true)); } ; })(function __$Relationship_prototype_index__2() {



                    if ((response.statusCode !== status.CREATED)) {
                      return _(response); } ; __then(); }); }, true)); }, true)); }); })(function ___(error, __result) { __tryCatch(_, function __$Relationship_prototype_index__2() { if (error) {


                return _(adjustError(error)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, _); }); }); };



    return Relationship;

  }).call(this, PropertyContainer);

}).call(this);