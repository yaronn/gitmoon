{
  "name": "hashring",
  "version": "0.0.6",
  "author": {
    "name": "Arnout Kazemier"
  },
  "description": "A pure JavaScript hash ring based on libketama",
  "main": "index",
  "keywords": [
    "hashring",
    "hash ring",
    "hashing",
    "hash",
    "consistent hashing",
    "libketama"
  ],
  "directories": {
    "lib": "./lib"
  },
  "maintainers": [
    {
      "name": "Arnout Kazemier",
      "email": "info@3rd-Eden.com",
      "url": "http://www.3rd-Eden.com"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/3rd-Eden/node-hashring/blob/master/LICENSE"
    }
  ],
  "repositories": [
    {
      "type": "git",
      "url": "http://github.com/3rd-Eden/node-hashring.git"
    }
  ],
  "dependencies": {
    "bisection": ""
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "## hashring [![BuildStatus](https://secure.travis-ci.org/3rd-Eden/node-hashring.png)](http://travis-ci.org/3rd-Eden/node-hashring)\n\nHash ring provides consistent hashing based on the `libketema` library.\n\n### Installation\n\nYou can either install it using the Node Package Manager (NPM)\n\n    npm install hashring\n\nOr fork this repository to your machine\n\n    git clone git://github.com/3rd-Eden/node-hashring.git hashring\n\n### Basic usage\n\nThe constructor is designed to handle multiple arguments types as the hash ring can be used for different use cases. You have the ability to use a `String` to add a single server, a `Array` to provide multiple servers or an `Object` to provide servers with a custom weight. The weight can be used to give a server a bigger distribution in the hash ring. For example you have 3 machines, 2 of those machines have 8 gig memory and one has 32 gig of memory because the last server has more memory you might it to handle more keys than the other server. So you can give it a weight of 2 and the other servers a weight of 1.\n\nCreating a hash ring with only one server\n\n``` javascript\nvar hashring = require('hashring');\nvar ring = new hashring('192.168.0.102:11212');\n```\n\nCreating a hash ring with multiple servers\n\n``` javascript\nvar hashring = require('hashring');\nvar ring = new hashring([ '192.168.0.102:11212', '192.168.0.103:11212', '192.168.0.104:11212']);\n```\n\nCreating a hash ring with multiple servers and weights\n\n``` javascript\nvar hashring = require('hashring');\nvar ring = new hashring({\n  '192.168.0.102:11212': 1\n, '192.168.0.103:11212': 2\n, '192.168.0.104:11212': 1\n});\n```\n\nBy default the hash ring uses a JavaScript crc32 implementation hashing algorithm. But this can be overwritten by adding a second argument to the constructor. This can be anything that is supported as hashing algorithm by the crypto module.\n\n``` javascript\nvar hashring = require('hashring');\nvar ring = new hashring('192.168.0.102:11212', 'md5');\n```\n\nI have chosen crc32 as default algorithm because a creates a nice dense ring distribution. Another good alternative and common used hashing algorithm is md5. The JavaScript crc32 algorithm is faster than md5. So If you are doing allot of operations per seconds these small differences can really matter.\n\n### Small API\n\nIn these examples I assume that you already setup a `hashring` instance, with the variable name `ring` like I did the in the examples illustrated above.\n\n**Getting a node by key**\na.k.a key -> node look up, this is where all the magic is happening.\n\n``` javascript\nring.getNode('foo'); // => '192.168.0.104:11212'\nring.getNode('pewpew'); // => '192.168.0.103:11212'\n```\n\n**Replacing a server**\nIf you are experiencing downtime with one of your servers, you might want to `hot swap` with a new server.\n\n``` javascript\nring.replaceServer('192.168.0.104:11212','192.168.0.112:11212');\nring.getNode('foo'); // => '192.168.0.112:11212'\n```\n\n**Add a server**\nAdds a new server to the hash ring, but please note that this could cause a shift in current key -> server distribution.\n\n``` javascript\nring.addServer('192.168.0.102:11212');\n```\n\n**Remove a server**\nRemove a server from the generated hash ring.\n\n``` javascript\nring.removeServer('192.168.0.102:11212');\n```\n\nFor a more extensive documentation: http://3rd-eden.github.com/node-hashring/\n",
  "_id": "hashring@0.0.6",
  "dist": {
    "shasum": "7be638a8010b6a413a3bf941431a1e51214684dc"
  },
  "_from": "hashring@*"
}
